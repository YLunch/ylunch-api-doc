{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Simple Inventory API",
    "description" : "This is a simple API",
    "contact" : {
      "email" : "rael.calitro@ynov.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/rael06/ylunch-api/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  }, {
    "url" : "https://ylunch-api.rael-calitro.ovh",
    "description" : "Online server"
  }, {
    "url" : "http://localhost:5254",
    "description" : "Local server"
  } ],
  "security" : [ {
    "Bearer" : [ ]
  } ],
  "tags" : [ {
    "name" : "trials",
    "description" : "Operations available to try the api"
  }, {
    "name" : "authentication",
    "description" : "authentication endpoints"
  }, {
    "name" : "users",
    "description" : "users endpoints"
  } ],
  "paths" : {
    "/trials/anonymous" : {
      "get" : {
        "tags" : [ "trials" ],
        "summary" : "Tries the api as anonymous",
        "description" : "- Authorization header: **no**\n",
        "operationId" : "getAnonymousTry",
        "responses" : {
          "200" : {
            "description" : "Success:\n- The anonymous trial Json object\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AnonymousTryDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          }
        }
      }
    },
    "/trials/authenticated" : {
      "get" : {
        "tags" : [ "trials" ],
        "summary" : "Tries the api as authenticated based on accessToken in headers",
        "description" : "- Authorization header: **yes**\n- Granted roles: \n  - RestaurantAdmin\n  - Customer\n",
        "operationId" : "getAuthenticatedTry",
        "responses" : {
          "200" : {
            "description" : "Success:\n- The authenticated trial Json object\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticatedTryDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized:\n- Please login and use provided tokens\n"
          }
        }
      }
    },
    "/trials/authenticated-customer" : {
      "get" : {
        "tags" : [ "trials" ],
        "summary" : "Tries the api as authenticated based on accessToken in headers",
        "description" : "- Authorization header: **yes**\n- Granted roles: \n  - Customer\n",
        "operationId" : "getAuthenticatedCustomerTry",
        "responses" : {
          "200" : {
            "description" : "Success:\n- The authenticated trial Json object\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticatedTryDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized:\n- Please login and use provided tokens\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User has not granted roles\n"
          }
        }
      }
    },
    "/trials/authenticated-restaurant-admin" : {
      "get" : {
        "tags" : [ "trials" ],
        "summary" : "Tries the api as authenticated based on accessToken in headers",
        "description" : "- Authorization header: **yes**\n- Granted roles: \n  - RestaurantAdmin\n",
        "operationId" : "getAuthenticatedRestaurantAdminTry",
        "responses" : {
          "200" : {
            "description" : "Success:\n- The authenticated trial Json object\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticatedTryDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized:\n- Please login and use provided tokens\n"
          },
          "403" : {
            "description" : "Forbidden:\n- User has not granted roles\n"
          }
        }
      }
    },
    "/authentication/login" : {
      "post" : {
        "tags" : [ "authentication" ],
        "summary" : "Login a user and returns access and refresh tokens as Json Web Token",
        "description" : "- Authorization header: **no**\n",
        "operationId" : "login",
        "requestBody" : {
          "description" : "A JSON object that contains the user name and password",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoginRequestDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success:\n- The access and refresh tokens\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenReadDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized:\n- Please login and use provided tokens\n"
          }
        }
      }
    },
    "/authentication/refresh-tokens" : {
      "post" : {
        "tags" : [ "authentication" ],
        "summary" : "Refresh user's tokens and returns access and refresh tokens as Json Web Token",
        "description" : "- Authorization header: **no**\n",
        "operationId" : "refreshTokens",
        "requestBody" : {
          "description" : "A JSON object that contains the access and refresh tokens",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TokenUpdateDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success:\n- The new access and refresh tokens\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenReadDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n- invalid input, object invalid\n"
          },
          "401" : {
            "description" : "Unauthorized:\n- Please login and use provided tokens\n"
          }
        }
      }
    },
    "/authentication/current-user" : {
      "get" : {
        "tags" : [ "authentication" ],
        "summary" : "Gets the current user based on the access token in headers",
        "description" : "- Authorization header: **yes**\n- Granted roles: \n  - RestaurantAdmin\n  - Customer\n",
        "operationId" : "getCurrentUser",
        "responses" : {
          "200" : {
            "description" : "Success:\n- The current user Json object\n",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserReadDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request:\n- Something went wrong, please try again later\n"
          },
          "401" : {
            "description" : "Unauthorized:\n- Please login and use provided tokens\n"
          }
        }
      }
    },
    "/restaurant-admins" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Restaurant admin registration",
        "description" : "- Authorization header: **no**\n",
        "operationId" : "addRestaurantAdmin",
        "requestBody" : {
          "description" : "User to register",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserCreateDto"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "user created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserReadDto"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "409" : {
            "description" : "User already exists"
          }
        }
      }
    },
    "/customers" : {
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Customer registration",
        "description" : "- Authorization header: **no**\n",
        "operationId" : "addCustomer",
        "requestBody" : {
          "description" : "User to register",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserCreateDto"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "user created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserReadDto"
                }
              }
            }
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "409" : {
            "description" : "User already exists"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AnonymousTryDto" : {
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "YLunchApi is running, you are anonymous"
          }
        }
      },
      "AuthenticatedTryDto" : {
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "YLunchApi is running, you are authenticated as {CurrentUserEmail} with Id: {CurrentUserId} and Roles: {CurrentUserRoles}\n"
          }
        }
      },
      "LoginRequestDto" : {
        "required" : [ "password", "userName" ],
        "type" : "object",
        "properties" : {
          "userName" : {
            "type" : "string",
            "description" : "cannot be empty",
            "example" : "my-pseudo"
          },
          "password" : {
            "type" : "string",
            "description" : "cannot be empty",
            "example" : "Password1234."
          }
        }
      },
      "TokenReadDto" : {
        "type" : "object",
        "properties" : {
          "accessToken" : {
            "type" : "string",
            "example" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJZCI6ImFlNTcxOGJkLWY5NzktNDQ1Ni04MmRlLTBjNzgzMzk4NzYzNCIsImp0aSI6IjBjZjc3NGYwLTUxYWQtNDM4Yi1hNTZlLTI1N2VlZGRhMjQ0MCIsIm5iZiI6MTY0MTEzNzMxMCwiZXhwIjoxNjQxMTU4OTEwLCJpYXQiOjE2NDExMzczMTB9.q1VaAodjovu79AyBNbrSxu4yZ4vOlDZQF2IyDvcsbJM\n"
          },
          "refreshToken" : {
            "type" : "string",
            "example" : "abcdefghij-a00000e0-aaa0-000a-0000-00e00aa00e00"
          }
        }
      },
      "TokenUpdateDto" : {
        "required" : [ "accessToken", "refreshToken" ],
        "type" : "object",
        "properties" : {
          "accessToken" : {
            "type" : "string",
            "example" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJZCI6ImFlNTcxOGJkLWY5NzktNDQ1Ni04MmRlLTBjNzgzMzk4NzYzNCIsImp0aSI6IjBjZjc3NGYwLTUxYWQtNDM4Yi1hNTZlLTI1N2VlZGRhMjQ0MCIsIm5iZiI6MTY0MTEzNzMxMCwiZXhwIjoxNjQxMTU4OTEwLCJpYXQiOjE2NDExMzczMTB9.q1VaAodjovu79AyBNbrSxu4yZ4vOlDZQF2IyDvcsbJM\n"
          },
          "refreshToken" : {
            "type" : "string",
            "example" : "abcdefghij-a00000e0-aaa0-000a-0000-00e00aa00e00"
          }
        }
      },
      "UserCreateDto" : {
        "required" : [ "email", "firstname", "lastname", "password", "phoneNumber" ],
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "format" : "email",
            "example" : "owner@restaurant.com"
          },
          "firstname" : {
            "type" : "string",
            "example" : "Jean"
          },
          "lastname" : {
            "type" : "string",
            "example" : "Dupont"
          },
          "phoneNumber" : {
            "type" : "string",
            "format" : "phone",
            "example" : "0612345678"
          },
          "password" : {
            "type" : "string",
            "format" : "password",
            "example" : "Password1234."
          }
        }
      },
      "UserReadDto" : {
        "type" : "object",
        "properties" : {
          "link" : {
            "type" : "string",
            "example" : "https://my-api.com/users/a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "id" : {
            "type" : "string",
            "example" : "a00000e0-aaa0-000a-0000-00e00aa00e00"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "example" : "user@domain.com"
          },
          "firstname" : {
            "type" : "string",
            "example" : "Jean"
          },
          "lastname" : {
            "type" : "string",
            "example" : "Dupont"
          },
          "phoneNumber" : {
            "type" : "string",
            "format" : "phone",
            "example" : "0612345678"
          },
          "roles" : {
            "type" : "array",
            "example" : [ "RestaurantAdmin" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "Bearer" : {
        "type" : "http",
        "description" : "JWT Authorization header using the Bearer scheme. Example: 'Authorization: Bearer {token}',\n",
        "scheme" : "bearer"
      }
    }
  }
}